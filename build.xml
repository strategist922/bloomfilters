<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" basedir="." name="BloomFilter" default="make-release">

    <property name="ivy.install.version" value="2.0.0-beta1"/>
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME"/>
    </condition>
    <property name="ivy.home" value="${user.home}/.ant"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

	<property file="./version.properties"/>
	
    <property name="src" value="./src"/>
    <property name="test" value="./test"/>
    <property name="test.src" value="${test}/src"/>

	<property name="lib" value="./lib"/>
    <property name="etc" value="./etc"/>
    <property name="build" value="./build" />
    <property name="build.app" value="${build}/app" />
    <property name="build.test" value="${build}/test" />
    <property name="build.doc" value="${build}/doc" />
    <property name="build.jars" value="${build}/jars" />
	<property name="build.dist" value="${build}/dist" />
    <property name="build.cobertura" value="${build}/cobertura"/>
    <property name="build.version.outputdir" value="${build}/version/org/onelab/filter" />
    <property name="doc.javadoc" value="${build.doc}/api" />
    <property name="doc.junit" value="${build.doc}/junit" />
    <property name="reports.cobertura" value="${build.doc}/reports/cobertura"/>
    <property name="reports.pmd" value="${build.doc}/reports/pmd"/>
	<property name="cobertura.xml" value="${reports.cobertura}/xml"/>
	<property name="cobertura.html" value="${reports.cobertura}/html"/>
	<property name="reports.junit" value="${build.doc}/reports/junit"/>

    <!-- Project Classpath -->
    <path id="project.classpath">
        <pathelement location="${build}"/>
        <pathelement location="${src}"/>
    </path>

    <!-- Test Classpath -->
    <path id="test.classpath">
    	<pathelement location="${build.test}"/>
    	<pathelement location="${build.app}"/>
        <pathelement location="${test.src}"/>
    </path>
	
    <!-- Cobertura classpath -->
    <path id="cobertura.classpath">
      <pathelement location="${build.cobertura}"/>
      <path refid="test.classpath"/>
    </path>

    <!-- PMD classpath -->
    <path id="pmd.classpath">
      <pathelement location="${pmd.ruleset}"/>
    </path>
	
    <!-- Clean up any temporary files used for the build process -->
    <target name="clean">
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="${build}"/>
        </delete>
    </target>

    <!-- Initialise the variables and directories that are to be used throughout the script. -->
    <target name="init" depends="clean">
        <mkdir dir="${build}"/>
        <tstamp>
             <format property="build.datetime" pattern="yyyy-MM-dd'T'HH:mm:ssZ"/>
                 <format property="build.datetime.filename" pattern="yyyy_MM_dd'T'HH_mm_ss"/>
         </tstamp>
           <echo message="Fetching repository version from SVN"/>
           <exec executable="svnversion" spawn="false" dir="." outputproperty="repository.version">
             <arg line="."/>
           </exec>
         <echo message="safe.repository.version=${repository.version}" file="${build}/svn"/>
         <echo message="Escaping repository version with regex"/>
         <replaceregexp file="${build}/svn" match=":" replace="~" byline="true"/>
         <mkdir dir="${build.dist}"/>
    </target>

    <target name="download-ivy" unless="offline">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://www.apache.org/dist/ant/ivy/${ivy.install.version}/ivy.jar" 
            dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy" unless="offline">
        <!-- try to load ivy here from ivy home, in case the user has not already dropped
          it into ant's lib dir (note that the latter copy will always take precedence).
          We will not fail as long as local lib dir exists (it may be empty) and
          ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                   uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <target name="resolve-runtime" depends="init">
        <ivy:resolve file="./ivy.xml" conf="runtime"/>
    </target>

    <target name="resolve-build" depends="init">
        <ivy:resolve file="./ivy.xml" conf="build"/>
    </target>
	
	<target name="resolve-cobertura" depends="init">
	    <ivy:resolve file="./ivy.xml" conf="cobertura"/>
	</target>

    <target name="resolve-pmd" depends="init">
        <ivy:resolve file="./ivy.xml" conf="pmd"/>
    </target>
	
    <!-- Set the property that we'll use to build the version file when
          the build is a dev one -->
    <target name="set-dev-build-label" unless="is.release" depends="init">
        <property file="${build}/svn"/>
        <echo message="${safe.repository.version}"/>
        <property name="build.label" value="${major.version} Development Build (Revision: ${repository.version}  Build Date: ${build.datetime} Build User: ${user.name} Build OS: ${os.name} ${os.version})"/>
        <property name="build.filename.suffix" value="dev-${major.version}-${safe.repository.version}-${build.datetime.filename}-${user.name}"/>
        <echo message="Set build label to ${build.label}"/>
     </target>
     
      
     <!-- Set the property that we'll use to build the version file when
          the build is for a new release -->
     
     <target name="set-release-build-label" depends="init">
        <property name="is.release" value="true"/>
        <property file="${build}/svn"/>
        <echo message="safe.repository.version=${repository.version}" file="${build}/svn"/>

        <!-- if the rc.number property is set, append it to the label and file suffix-->
        <condition property="build.label" value="${major.version}.${minor.version}.rc${rc.number}">
          <isset property="rc.number"/>
        </condition>      
        <condition property="build.filename.suffix" value="${major.version}.${minor.version}.rc${rc.number}">
          <isset property="rc.number"/>
        </condition>
      
        <!-- if the rc.number was not set, then append the svn repo version to the label and suffix-->
        <property name="build.label" value="${major.version}.${minor.version}.${repository.version}"/>
        <property name="build.filename.suffix" value="${major.version}.${minor.version}.${safe.repository.version}"/>
                
        <echo message="Set build label to ${build.label}"/>
      </target>
     
     <!-- Generate a Version.java file containing the major, minor and repository version
          numbers. Also, include the build.label property set above to indicate build version 
          and environment
     -->
     <target name="update-version-file" depends="set-dev-build-label">
        <echo message="Making version file for build"/>
        <mkdir dir="${build.version.outputdir}"/>
        <echo message='package org.onelab.filter;&#x0a;/// Do not edit - this file is generated by build.xml&#x0a;public class Version {&#x0a;  public static String revision = "${repository.version}";&#x0a;  public static String release = "${major.version}";&#x0a; public static String minor = "${minor.version}";&#x0a;  public static String identifier = "BloomFilter/${build.label}";&#x0a;}&#x0a;' 
                  file="${build.version.outputdir}/Version.java"/>
     </target>
      
     <!-- Compile the generated version file -->
     <target name="compile-version-file" depends="compile-app">
        <echo message="Compiling generated version file"/>
        <delete file="${build.app}/org/onelab/filter/Version.class"/>
        <javac srcdir="${build}/version" destdir="${build.app}" optimize="on" debug="on" deprecation="on">
          <classpath refid="project.classpath"/>
        </javac>
     </target>
     
	
    <!-- Compile all application classes -->
    <target name="compile-app" depends="init">
        <echo message="Compiling app code"/>
    	<mkdir dir="${build.app}"/>
        <ivy:cachepath pathid="resolved.classpath" />
        <javac srcdir="${src}" destdir="${build.app}" optimize="on" debug="on" deprecation="on" encoding="UTF-8">
            <classpath refid="project.classpath"/>
            <classpath refid="resolved.classpath"/>
        </javac>
    </target>

    <!-- Compile all the unit tests -->
    <target name="compile-tests" depends="compile-app, resolve-build">
        <echo message="Compiling tests"/>
        <mkdir dir="${build.test}"/>
        <ivy:cachepath pathid="resolved.classpath"/>
        <javac srcdir="${test.src}" destdir="${build.test}" optimize="on" debug="on" deprecation="on" encoding="UTF-8">
            <classpath refid="test.classpath"/>
            <classpath refid="resolved.classpath"/>
        </javac>
    </target>

	
    <!-- Pull together the test data, schema, config files etc -->
      <target name="test-setup">
        <mkdir dir="${reports.junit}"/>
      </target>
      
      <!-- Run the unit test suite (without instrumentation) -->
      <target name="unit-tests" depends="compile-tests, test-setup">
        <mkdir dir="${reports.junit}" />
        <antcall target="run-unit-tests">
          <param name="make.junit.report" value="true"/>
          <param name="junit.formatter" value="xml"/>
          <param name="output.to.formatters" value="yes"/>
          <reference refid="test.classpath" torefid="junit.run.classpath"/>
        </antcall>
      </target> 
    
      <!-- Run the unit test suite (with instrumentation) -->
      <target name="cobertura" depends="compile-tests, test-setup, resolve-cobertura">
      	<ivy:cachepath pathid="resolved.classpath"/>
        <mkdir dir="${build.cobertura}"/>
        <mkdir dir="${reports.cobertura}"/>
        <taskdef classpathref="resolved.classpath" resource="tasks.properties"/>
        <delete file="${build.cobertura}/cobertura.ser"/>
                    
        <cobertura-instrument todir="${build.cobertura}" datafile="${build.cobertura}/cobertura.ser">
            <fileset dir="${build.app}">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>
        
        <antcall target="run-unit-tests">
            <param name="make.junit.report" value="false"/>
            <param name="junit.formatter" value="brief"/>
            <param name="output.to.formatters" value="yes"/>
        	<reference refid="cobertura.classpath" torefid="junit.run.classpath"/>
        </antcall>

        <cobertura-report format="html" datafile="${build.cobertura}/cobertura.ser" destdir="${cobertura.html}" srcdir="${src}"/>
        <cobertura-report format="xml" datafile="${build.cobertura}/cobertura.ser" destdir="${cobertura.xml}" srcdir="${src}"/>
    </target>

	<!-- Target to actually run all the unit tests -->
      <target name="run-unit-tests">
      	<ivy:cachepath pathid="resolved.classpath"/>
        <junit printsummary="yes" fork="yes" haltonerror="yes" haltonfailure="yes">
          <sysproperty key="file.encoding" value="UTF-8" />
          <sysproperty key="net.sourceforge.cobertura.datafile" file="${build.cobertura}/cobertura.ser" />
          <classpath refid="resolved.classpath"/>
          <classpath refid="junit.run.classpath"/>
          <formatter type="${junit.formatter}" usefile="${make.junit.report}"/>
          <batchtest haltonfailure="no" todir="${reports.junit}">
            <fileset dir="${build.test}" />
          </batchtest>
        </junit>
      </target>

	<target name="jar" depends="unit-tests">
	        <mkdir dir="${build.jars}" />
	        <jar jarfile="${build.jars}/bloomfilter.jar" basedir="${build.app}" />
	    </target>
	
	<!-- Generate all javadoc -->
	  <target name="javadoc">
	     <mkdir dir="${doc.javadoc}"/>
	     <javadoc packagenames="org.*" sourcepath="${src}" defaultexcludes="yes" destdir="${doc.javadoc}" author="true" version="true" use="true" windowtitle="Talis Archive Utils API Documentation" classpathref="test.classpath">
	       <doctitle><![CDATA[<h1>Onelab Bloomfilter (Modified) API Documentation</h1>]]></doctitle>
	       <bottom><![CDATA[<i>Copyright &#169; 2005 European Commission project OneLab. All Rights Reserved.</i>]]></bottom>
	     </javadoc>
	  </target>
	         
    <target name="make-dist" depends="jar, javadoc, reports">
        <mkdir dir="${build.dist}"/>
        <copy file= "${build.jars}/bloomfilter.jar" tofile="${build.dist}/bloomfilter-${build.filename.suffix}.jar" overwrite="true" />
    </target>
    	
    <target name="make-release" depends="set-release-build-label, make-dist">
        <!-- Check that the working copy is up to date etc -->
        <!--
    	<condition property="valid.repo.version">
              <matches pattern="^\d*$" string="${repository.version}"/>
        </condition>
        <fail message="Invalid repo version for release ${repository.version}, make sure you check in changes and svn update"
            unless="valid.repo.version"/>
        -->
        <!-- Check that the generated label for the build is valid -->
        <!--
    	<condition property="valid-version-number">
          <matches pattern="[0-9]*\.[0-9]*(\.[0-9]*|(\.rc[0-9]*))$" string="${build.filename.suffix}"/>
        </condition>
        <fail message="Invalid version number for release ${build.filename.suffix}"
            unless="valid-version-number"/>
        -->
        <mkdir dir="${build.dist}/${build.filename.suffix}"/>
        <mkdir dir="${build.dist}/${build.filename.suffix}/lib"/>
        <mkdir dir="${build.dist}/${build.filename.suffix}/doc"/>

        <copy todir="${build.dist}/${build.filename.suffix}/doc">
            <fileset dir="${build.doc}"/>
        </copy>
    </target>
	
    <!-- Run PMD against source -->
    <target name="pmd" description="Run PMD against the source code" depends="resolve-pmd">
      <ivy:cachepath pathid="resolved.classpath"/>
      <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="resolved.classpath"/>
      <mkdir dir="${reports.pmd}"/>
      <pmd targetjdk="1.6" rulesetfiles="./ruleset.xml" failOnRuleViolation="no">
        <formatter type="html" toFile="${reports.pmd}/index.html"/>
        <formatter type="xml" toFile="${reports.pmd}/pmd_report.xml"/>
        <formatter type="text" toConsole="true"/>
        <fileset dir="${src}">
          <include name="**/*.java"/>
        </fileset>
      </pmd>
    </target>

    <!-- Reports target, just aggregates the cobertura and pmd targets -->
    <target name="reports" depends="cobertura, pmd" />	

</project>

